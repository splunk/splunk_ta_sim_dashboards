[sim_modular_input://GCP Compute Engine Input Stream]
disabled = 1
additional_meta_data_flag = 0
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = 	"data('instance/cpu/utilization', filter=filter('instance_id', '*')).publish('DSIM:GCP Compute Engine'); data('instance/disk/write_ops_count').publish('DSIM:GCP Compute Engine'); data('instance/disk/read_ops_count').publish('DSIM:GCP Compute Engine'); data('instance/disk/write_bytes_count').publish('DSIM:GCP Compute Engine'); data('instance/disk/read_bytes_count').publish('DSIM:GCP Compute Engine'); data('instance/network/received_bytes_count').publish('DSIM:GCP Compute Engine'); data('instance/network/sent_bytes_count').publish('DSIM:GCP Compute Engine');"
sourcetype = stash


[sim_modular_input://AWS EC2 Input stream]
additional_meta_data_flag = 0
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('CPUUtilization', filter=filter('stat', 'mean') and filter('namespace', 'AWS/EC2') and filter('InstanceId', '*')).promote('InstanceId','aws_tag_Name','aws_availability_zone', 'aws_instance_type','aws_state','aws_image_id',allow_missing=True).publish('DSIM:AWS/EC2'); data('DiskReadBytes', filter=filter('namespace', 'AWS/EC2') and filter('InstanceId', '*') and filter('stat', 'sum'), rollup='rate', extrapolation='last_value', maxExtrapolations=5).promote('InstanceId','aws_availability_zone', 'aws_instance_type', allow_missing=True).scale(60).publish('DSIM:AWS/EC2'); data('DiskWriteBytes', filter=filter('namespace', 'AWS/EC2') and filter('InstanceId', '*') and filter('stat', 'sum'), rollup='rate', extrapolation='last_value', maxExtrapolations=5).promote('InstanceId','aws_availability_zone', 'aws_instance_type', allow_missing=True).scale(60).publish('DSIM:AWS/EC2'); data('DiskReadOps', filter=filter('namespace', 'AWS/EC2') and filter('InstanceId', '*') and filter('stat', 'sum'), rollup='rate', extrapolation='last_value', maxExtrapolations=5).promote('InstanceId','aws_availability_zone', 'aws_instance_type', allow_missing=True).scale(60).publish('DSIM:AWS/EC2'); data('DiskWriteOps', filter=filter('namespace', 'AWS/EC2') and filter('InstanceId', '*') and filter('stat', 'sum'), rollup='rate', extrapolation='last_value', maxExtrapolations=5).promote('InstanceId','aws_availability_zone', 'aws_instance_type', allow_missing=True).scale(60).publish('DSIM:AWS/EC2'); data('NetworkIn', filter=filter('namespace', 'AWS/EC2') and filter('InstanceId', '*') and filter('stat', 'sum'), rollup='rate', extrapolation='last_value', maxExtrapolations=5).promote('InstanceId','aws_availability_zone', 'aws_instance_type', allow_missing=True).scale(60).publish('DSIM:AWS/EC2'); data('NetworkOut', filter=filter('namespace', 'AWS/EC2') and filter('InstanceId', '*') and filter('stat', 'sum'), rollup='rate', extrapolation='last_value', maxExtrapolations=5).promote('InstanceId','aws_availability_zone', 'aws_instance_type', allow_missing=True).scale(60).publish('DSIM:AWS/EC2');"
sourcetype = stash
disabled = 1

[sim_modular_input://Azure Virtual Machine Input Stream]
additional_meta_data_flag = 0
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('Percentage CPU', filter=filter('primary_aggregation_type', 'true') and filter('azure_resource_id', '*') and filter('resource_type', 'Microsoft.Compute/virtualMachines', 'Microsoft.ClassicCompute/virtualMachines')).promote('azure_resource_id','azure_resource_name','azure_resource_group_name','azure_region', allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Disk Read Bytes', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.Compute/virtualMachines'), rollup='average').promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Disk Write Bytes', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.Compute/virtualMachines'), rollup='average').promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Disk Read Bytes/Sec', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.ClassicCompute/virtualMachines')).promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Disk Write Bytes/Sec', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.ClassicCompute/virtualMachines'), rollup='average').promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Disk Read Operations/Sec', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.Compute/virtualMachines', 'Microsoft.ClassicCompute/virtualMachines')).promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Disk Write Operations/Sec', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.Compute/virtualMachines', 'Microsoft.ClassicCompute/virtualMachines'), ).promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Network In', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.Compute/virtualMachines', 'Microsoft.ClassicCompute/virtualMachines'), rollup='average').promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines'); data('Network Out', filter=filter('primary_aggregation_type', 'true') and filter('resource_type', 'Microsoft.Compute/virtualMachines', 'Microsoft.ClassicCompute/virtualMachines'), rollup='average').promote('azure_resource_name','azure_resource_id','azure_resource_group_name','azure_region',allow_missing=True).publish('DSIM:Azure Virtual Machines')"
sourcetype = stash
disabled = 1

[sim_modular_input://Docker Containers Input Stream]
additional_meta_data_flag = 0
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('cpu.usage.total', filter=filter('plugin', 'docker'), rollup='rate').promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers'); data('cpu.usage.system', filter=filter('plugin', 'docker'), rollup='rate').promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers'); data('memory.usage.total', filter=filter('plugin', 'docker')).promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers'); data('memory.usage.limit', filter=filter('plugin', 'docker')).promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers'); data('blkio.io_service_bytes_recursive.write', filter=filter('plugin', 'docker'), rollup='rate').promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers'); data('blkio.io_service_bytes_recursive.read', filter=filter('plugin', 'docker'), rollup='rate').promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers'); data('network.usage.tx_bytes', filter=filter('plugin', 'docker'), rollup='rate').scale(8).promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers'); data('network.usage.rx_bytes', filter=filter('plugin', 'docker'), rollup='rate').scale(8).promote('plugin-instance', allow_missing=True).publish('DSIM:Docker Containers');"
sourcetype = stash
disabled = 1

[sim_modular_input://Smartagent Hosts Input Stream]
additional_meta_data_flag = 0
index = sim_metrics
interval = 300
metric_resolution = 300000
signal_flow_programs = "data('cpu.utilization', filter=(not filter('agent', '*'))).promote('host','host_kernel_name','host_linux_version','host_mem_total','host_cpu_cores', allow_missing=True).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.free', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('disk_ops.write', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('disk_ops.read', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.available', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.used', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.buffered', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.cached', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.active', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.inactive', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.wired', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('df_complex.used', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('df_complex.free', filter=(not filter('agent', '*'))).sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('memory.utilization', filter=(not filter('agent', '*'))).promote('host',allow_missing=True).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('vmpage_io.swap.in', filter=(not filter('agent', '*')), rollup='rate').promote('host',allow_missing=True).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('vmpage_io.swap.out', filter=(not filter('agent', '*')), rollup='rate').promote('host',allow_missing=True).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('if_octets.tx', filter=(not filter('agent', '*')), rollup='rate').sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('if_octets.rx', filter=(not filter('agent', '*')), rollup='rate').sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('if_errors.rx', rollup='rate').sum(by=['host']).publish('DSIM:Hosts (Smart Agent/collectd)');   	data('if_errors.tx', rollup='rate').sum().promote('host',allow_missing=True).publish('DSIM:Hosts (Smart Agent/collectd)');"
sourcetype = stash
disabled = 1
